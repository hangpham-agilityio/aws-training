AWSTemplateFormatVersion: '2010-09-09'
Description: Cognito Stack
Parameters:
  CognitoDomain:
    Type: String
    AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Description: Enter a Cognito domain name. Must be alpha numeric 3-63 in length.
  CallbackURL:
    Type: String
  IdentityPoolName:
    Type: String

Resources:
  # Creates a user pool in cognito for your app to auth against
  # This example not requires MFA
  # Other fields can be added to the schema
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration:
        CaseSensitive: true
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${CognitoDomain}-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true

  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !Ref CallbackURL
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref UserPool

  CognitoAdminGroupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: AdminGroupRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'execute-api:Invoke'
                Resource:
                  - 'arn:aws:execute-api:us-west-2:376387039631:vwi4uy98m0/*/*/products'
                Effect: Allow
              - Action:
                - 'dynamodb:PutItem'
                - 'dynamodb:GetItem'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
                Resource:
                  - 'arn:aws:dynamodb:us-west-2:376387039631:table/Product'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolgroup.html
  UserPoolAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Group for admin user
      GroupName: Admin
      Precedence: 0
      RoleArn: !GetAtt CognitoAdminGroupRole.Arn
      UserPoolId: !Ref UserPool

  CognitoCustomerGroupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: CustomerGroupRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'execute-api:Invoke'
                Resource:
                  - 'arn:aws:execute-api:us-west-2:376387039631:vwi4uy98m0/*/*/orders'
                Effect: Allow
              - Action:
                - 'dynamodb:PutItem'
                - 'dynamodb:GetItem'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
                Resource:
                  - 'arn:aws:dynamodb:us-west-2:376387039631:table/Order'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com

  UserPoolCustomerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Group for customer user
      GroupName: Customer
      Precedence: 1
      RoleArn: !GetAtt CognitoCustomerGroupRole.Arn
      UserPoolId: !Ref UserPool

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypool.html
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: False
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
      IdentityPoolName: !Ref IdentityPoolName

  CognitoAuthenticateRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: CognitoAuthenticatePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource:
                  - '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com

  CognitoUnauthenticateRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: CognitoUnauthenticatePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource:
                  - '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypoolroleattachment.html
  CognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticateRole.Arn
        unauthenticated: !GetAtt CognitoUnauthenticateRole.Arn
      RoleMappings:
        ProductDeliveryUserPool1:
          IdentityProvider: !Ref UserPool
          AmbiguousRoleResolution: Deny
          Type: Rules
          RulesConfiguration:
            Rules:
              - Claim: 'groups'
                MatchType: 'Equals'
                RoleARN: !GetAtt CognitoAdminGroupRole.Arn
                Value: 'Admin'
        ProductDeliveryUserPool2:
          IdentityProvider: !Ref UserPool
          AmbiguousRoleResolution: Deny
          Type: Rules
          RulesConfiguration:
            Rules:
              - Claim: 'groups'
                MatchType: 'Equals'
                RoleARN: !GetAtt CognitoCustomerGroupRole.Arn
                Value: 'Customer'

Outputs:
  CognitoUserPoolID:
    Value: !Ref UserPool
    Description: The UserPool ID
  CognitoAppClientID:
    Value: !Ref UserPoolClient
    Description: The app client
  HostedUIURL:
    Value: !Sub https://${CognitoDomain}.auth.us-west-2.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=token&scope=email+openid+profile&redirect_uri=${CallbackURL}
    Description: The hosted UI URL