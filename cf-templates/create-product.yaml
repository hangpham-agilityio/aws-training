AWSTemplateFormatVersion: '2010-09-09'
Description: Cognito Stack
Parameters:
  CognitoDomain:
    Type: String
    AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Description: Enter a Cognito domain name. Must be alpha numeric 3-63 in length.
  CallbackURL:
    Type: String
  IdentityPoolName:
    Type: String
  APIName:
    Type: String
  APIGatewayType:
    Type: String

Resources:
  # Creates a user pool in cognito for your app to auth against
  # This example not requires MFA
  # Other fields can be added to the schema
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration:
        CaseSensitive: true
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${CognitoDomain}-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true

  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !Ref CallbackURL
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref UserPool

  CognitoAdminGroupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: AdminGroupRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'execute-api:Invoke'
                Resource:
                  - 'arn:aws:execute-api:us-west-2:376387039631:vwi4uy98m0/*/*/products'
                Effect: Allow
              - Action:
                - 'dynamodb:PutItem'
                - 'dynamodb:GetItem'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
                Resource:
                  - 'arn:aws:dynamodb:us-west-2:376387039631:table/Product'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolgroup.html
  UserPoolAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Group for admin user
      GroupName: Admin
      Precedence: 0
      RoleArn: !GetAtt CognitoAdminGroupRole.Arn
      UserPoolId: !Ref UserPool

  CognitoCustomerGroupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: CustomerGroupRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'execute-api:Invoke'
                Resource:
                  - 'arn:aws:execute-api:us-west-2:376387039631:vwi4uy98m0/*/*/orders'
                Effect: Allow
              - Action:
                - 'dynamodb:PutItem'
                - 'dynamodb:GetItem'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
                Resource:
                  - 'arn:aws:dynamodb:us-west-2:376387039631:table/Order'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com

  UserPoolCustomerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Group for customer user
      GroupName: Customer
      Precedence: 1
      RoleArn: !GetAtt CognitoCustomerGroupRole.Arn
      UserPoolId: !Ref UserPool

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypool.html
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: False
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
      IdentityPoolName: !Ref IdentityPoolName

  CognitoAuthenticateRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: CognitoAuthenticatePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource:
                  - '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com

  CognitoUnauthenticateRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: CognitoUnauthenticatePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource:
                  - '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypoolroleattachment.html
  CognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        "authenticated": !GetAtt CognitoAuthenticateRole.Arn
        "unauthenticated": !GetAtt CognitoUnauthenticateRole.Arn
      RoleMappings:
        "cognito-identity.amazonaws.com":
          IdentityProvider: !Sub cognito-idp.us-west-2.amazonaws.com/${UserPool}:${UserPoolClient}
          AmbiguousRoleResolution: AuthenticatedRole
          Type: Rules
          RulesConfiguration:
            Rules:
              - Claim: groups
                MatchType: Contains
                RoleARN: !GetAtt CognitoAdminGroupRole.Arn
                Value: Admin
              - Claim: groups
                MatchType: Contains
                RoleARN: !GetAtt CognitoCustomerGroupRole.Arn
                Value: Customer

  # Define lambda execution role
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: LambdaPolicyProduct
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:*'
                Effect: Allow
              - Action:
                - 'dynamodb:PutItem'
                - 'dynamodb:BatchGetItem'
                - 'dynamodb:GetItem'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:BatchWriteItem'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
                Resource:
                  - 'arn:aws:dynamodb:us-west-2:376387039631:table/Product'
                Effect: Allow

      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  # Define create product lambda function
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-cli-package.html (Using the package command to upload local artifacts to S3 bucket)
  CreateProductItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: create-product
      Description: Lambda Function to create product item to DynamoDB
      Runtime: python3.8
      Code:
        S3Bucket: create-product-function
        S3Key: 92ee1584456d4339e71652216a1a6b88
      Handler: create-product.lambda_handler
      MemorySize: 128
      Timeout: 10
      Role:
        !GetAtt LambdaExecutionRole.Arn

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
          - !Ref APIGatewayType
      Name: !Ref APIName

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'products'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiGatewayIamRole
    Properties:
      ApiKeyRequired: true
      AuthorizationType: COGNITO_USER_POOLS
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateProductItemFunction.Arn}/invocations'
      OperationName: 'products'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizerId: !Ref ApiGatewayAuthorizer

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'v0'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt CreateProductItemFunction.Arn

  ApiGatewayAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      Name: ProductAuthorizer
      RestApiId: !Ref ApiGatewayRestApi
      ProviderARNs:
        - !GetAtt UserPool.Arn

Outputs:
  CognitoUserPoolID:
    Value: !Ref UserPool
    Description: The UserPool ID
  CognitoAppClientID:
    Value: !Ref UserPoolClient
    Description: The app client
  HostedUIURL:
    Value: !Sub https://${CognitoDomain}.auth.us-west-2.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=token&scope=email+openid+profile&redirect_uri=${CallbackURL}
    Description: The hosted UI URL